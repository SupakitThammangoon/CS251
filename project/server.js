const express = require('express');
const path = require('path');
const sql = require('mssql');
const cors = require('cors');

const app = express();
const port = 3000;

// ============================
// ‚öôÔ∏è Middleware
// ============================
app.use(cors());
app.use(express.json()); // ‡∏£‡∏±‡∏ö JSON body
app.use(express.static(path.join(__dirname, 'public')));

// ============================
// üõ†Ô∏è SQL Server Config
// ============================
const dbConfig = {
  user: 'sa',
  password: 'YourStrong@Passw0rd',
  server: 'localhost',
  database: 'MovieDB', // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô SSMS
  options: {
    encrypt: false,
    trustServerCertificate: true
  }
};

// ============================
// üìÑ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
// ============================
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'home.html'));
});

// ============================
// üìå API: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 'user')
// ============================
app.post('/api/register', async (req, res) => {
  const { username, email, phone, password, role = 'user' } = req.body;

  try {
    await sql.connect(dbConfig);

    if (!username || !email || !phone || !password) {
      return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const check = await sql.query`
      SELECT * FROM Users WHERE username = ${username} OR email = ${email}
    `;

    if (check.recordset.length > 0) {
      return res.status(401).json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    await sql.query`
      INSERT INTO Users (username, email, phone, password, role)
      VALUES (${username}, ${email}, ${phone}, ${password}, ${role})
    `;

    const user = { username, email, phone, role };
    res.status(200).json({ success: true, message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', user });

  } catch (error) {
    console.error('‚ùå DB Error:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' });
  }
});


// ============================
// üìå API: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏î‡∏∂‡∏á role ‡∏î‡πâ‡∏ß‡∏¢)
// ============================
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT id, username, email, phone, role FROM Users
      WHERE username = ${username} AND password = ${password}
    `;

    if (result.recordset.length > 0) {
      const user = result.recordset[0]; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏° role
      res.status(200).json({ success: true, user }); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö client
    } else {
      res.status(401).json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
  } catch (error) {
    console.error('‚ùå DB Login Error:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
  }
});

// ============================
// üìå API: ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
// ============================
app.get('/api/profile/:id', async (req, res) => {
  const { id } = req.params;

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!id || isNaN(id)) {
    return res.status(400).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    await sql.connect(dbConfig);
    const result = await sql.query`
      SELECT id, username, email, phone FROM Users WHERE id = ${parseInt(id)}
    `;

    if (result.recordset.length > 0) {
      res.status(200).json(result.recordset[0]);
    } else {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }
  } catch (error) {
    console.error('‚ùå Profile Fetch Error:', error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
  }
});


// ============================
// üìå API: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
// ============================
// üìå PUT /api/profile/:id
app.put('/api/profile/:id', async (req, res) => {
  const { id } = req.params;
  const { username, email, phone } = req.body;

  try {
    await sql.connect(dbConfig);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö user ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const check = await sql.query`
      SELECT id FROM Users WHERE username = ${username} AND id != ${id}
    `;
    if (check.recordset.length > 0) {
      return res.status(409).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    await sql.query`
      UPDATE Users 
      SET username = ${username}, email = ${email}, phone = ${phone}
      WHERE id = ${id}
    `;

    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error('‚ùå Profile Update Error:', error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
  }
});



// ============================
// üìå API: ‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß 
// ============================
app.post('/api/book', async (req, res) => {
  const { userId, seats, totalPrice, movie, time, cinema } = req.body;

  try {
    await sql.connect(dbConfig);

    await sql.query`
      INSERT INTO Bookings (user_id, movie, time, cinema, seats, total_price)
      VALUES (${userId}, ${movie}, ${time}, ${cinema}, ${seats.join(", ")}, ${totalPrice})
    `;

    res.status(200).json({
      message: "‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      ticketId: Math.floor(Math.random() * 100000)
    });
  } catch (error) {
    console.error("‚ùå Booking Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß" });
  }
});

// ============================
// üìå API: ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 
// ============================
app.post('/api/user-bookings', async (req, res) => {
  const { userId } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT 
        B.id,
        B.movie,
        B.time,
        B.cinema,
        B.seats,
        B.total_price,
        B.booking_date,
        U.username
      FROM Bookings B
      JOIN Users U ON B.user_id = U.id
      WHERE B.user_id = ${userId}
    `;

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Fetch Bookings Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ" });
  }
});


// ============================
// üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Server
// ============================
app.listen(port, () => {
  console.log(`‚úÖ Server running at http://localhost:${port}`);
});

// ============================
// üìå API: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// ============================
app.post('/api/check-seats', async (req, res) => {
  const { seats, movie, time, cinema } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT seats FROM Bookings
      WHERE movie = ${movie} AND time = ${time} AND cinema = ${cinema}
    `;

    // ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const allBookedSeats = result.recordset
      .flatMap(row => row.seats.split(',').map(s => s.trim()));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥
    const duplicated = seats.filter(s => allBookedSeats.includes(s));

    if (duplicated.length > 0) {
      return res.status(409).json({ duplicated }); // 409 Conflict
    }

    res.status(200).json({ message: "‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" });
  } catch (error) {
    console.error("‚ùå Seat Check Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// ============================
// üìå API: Admin - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ============================
app.get('/api/admin/users', async (req, res) => {
  try {
    await sql.connect(dbConfig);
    const result = await sql.query`SELECT id, username, email, phone FROM Users`;
    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Admin Get Users Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
  }
});

// ============================
// üìå API: Admin - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ============================
app.get('/api/admin/bookings', async (req, res) => {
  try {
    await sql.connect(dbConfig);
    const result = await sql.query`SELECT * FROM Bookings ORDER BY booking_date DESC`;
    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Admin Get Bookings Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

// ============================
// üìå API: Admin - ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// ============================
app.delete('/api/admin/users/:id', async (req, res) => {
  const userId = req.params.id;

  try {
    await sql.connect(dbConfig);
    await sql.query`DELETE FROM Users WHERE id = ${userId}`;
    res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå Delete User Error:", error);
    res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
  }
});

// ============================
// üìå API: Admin - ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// ============================
app.delete('/api/admin/bookings/:id', async (req, res) => {
  const bookingId = req.params.id;

  try {
    await sql.connect(dbConfig);
    await sql.query`DELETE FROM Bookings WHERE id = ${bookingId}`;
    res.status(200).json({ success: true });
  } catch (error) {
    console.error("‚ùå Delete Booking Error:", error);
    res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});
app.get('/api/profile/:id', async (req, res) => {
  const { id } = req.params;

  try {
    await sql.connect(dbConfig);
    const result = await sql.query`
      SELECT id, username, email, phone, role FROM Users WHERE id = ${id}
    `;

    if (result.recordset.length > 0) {
      res.status(200).json(result.recordset[0]);  // ‡∏à‡∏∞‡∏°‡∏µ role ‡∏î‡πâ‡∏ß‡∏¢
    } else {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }
  } catch (error) {
    console.error('‚ùå Profile Fetch Error:', error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
  }
});

// ============================
// üìå API: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
// ============================
app.post('/api/change-password', async (req, res) => {
  const { username, oldPassword, newPassword } = req.body;

  try {
    await sql.connect(dbConfig);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    const check = await sql.query`
      SELECT id FROM Users WHERE username = ${username} AND password = ${oldPassword}
    `;

    if (check.recordset.length === 0) {
      return res.status(401).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    await sql.query`
      UPDATE Users SET password = ${newPassword} WHERE username = ${username}
    `;

    res.status(200).json({
      success: true,
      message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (error) {
    console.error('‚ùå Change Password Error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
    });
  }
});
