const express = require('express');
const path = require('path');
const sql = require('mssql');
const cors = require('cors');

const app = express();
const port = 3000;

// ============================
// ‚öôÔ∏è Middleware
// ============================
app.use(cors());
app.use(express.json()); // ‡∏£‡∏±‡∏ö JSON body
app.use(express.static(path.join(__dirname, 'public')));

// ============================
// üõ†Ô∏è SQL Server Config
// ============================
const dbConfig = {
  user: 'sa',
  password: 'YourStrong@Passw0rd',
  server: 'localhost',
  database: 'MovieDB', // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô SSMS
  options: {
    encrypt: false,
    trustServerCertificate: true
  }
};

// ============================
// üìÑ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
// ============================
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'home.html'));
});

// ============================
// üìå API: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
// ============================
app.post('/api/register', async (req, res) => {
  const { username, email, phone, password } = req.body;

  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await sql.connect(dbConfig);

    // INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Table
    await sql.query`
      INSERT INTO Users (username, email, phone, password)
      VALUES (${username}, ${email}, ${phone}, ${password})
    `;

    res.status(200).json({ message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
  } catch (error) {
    console.error('‚ùå DB Error:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' });
  }
});

// ============================
// üìå API: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
// ============================
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT id, username, email, phone FROM Users
      WHERE username = ${username} AND password = ${password}
    `;

    if (result.recordset.length > 0) {
      const user = result.recordset[0]; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      res.status(200).json({ success: true, user }); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö client
    } else {
      res.status(401).json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
  } catch (error) {
    console.error('‚ùå DB Login Error:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
  }
});

// ============================
// üìå API: ‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß
// ============================
app.post('/api/book', async (req, res) => {
  const { username, seats, totalPrice, movie, time, cinema } = req.body;

  try {
    await sql.connect(dbConfig);

    await sql.query`
      INSERT INTO Bookings (username, movie, time, cinema, seats, total_price)
      VALUES (${username}, ${movie}, ${time}, ${cinema}, ${seats.join(", ")}, ${totalPrice})
    `;

    res.status(200).json({
      message: "‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      ticketId: Math.floor(Math.random() * 100000) // ‡∏™‡∏∏‡πà‡∏° ticket ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    });
  } catch (error) {
    console.error("‚ùå Booking Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß" });
  }
});

// ============================
// üìå API: ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
// ============================
app.post('/api/user-bookings', async (req, res) => {
  const { username } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT * FROM Bookings WHERE username = ${username}
    `;

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("‚ùå Fetch Bookings Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ" });
  }
});

// ============================
// üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Server
// ============================
app.listen(port, () => {
  console.log(`‚úÖ Server running at http://localhost:${port}`);
});

// ============================
// üìå API: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// ============================
app.post('/api/check-seats', async (req, res) => {
  const { seats, movie, time, cinema } = req.body;

  try {
    await sql.connect(dbConfig);

    const result = await sql.query`
      SELECT seats FROM Bookings
      WHERE movie = ${movie} AND time = ${time} AND cinema = ${cinema}
    `;

    // ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const allBookedSeats = result.recordset
      .flatMap(row => row.seats.split(',').map(s => s.trim()));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥
    const duplicated = seats.filter(s => allBookedSeats.includes(s));

    if (duplicated.length > 0) {
      return res.status(409).json({ duplicated }); // 409 Conflict
    }

    res.status(200).json({ message: "‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" });
  } catch (error) {
    console.error("‚ùå Seat Check Error:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ" });
  }
});

